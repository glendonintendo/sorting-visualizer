{"version":3,"sources":["utils/animationsGenerators.js","components/SortTypeSelect.js","components/SortDescription.js","utils/getSortInfo.js","components/SortInfoModal.js","components/Nav.js","components/Visualizer.js","components/Controller.js","App.js","index.js"],"names":["swap","arr","idx1","idx2","mergeSortHelper","array","start","end","auxiliary","animations","mid","Math","floor","merge","k","i","j","barHeight","quickSortHelper","randIdx","random","push","type","indeces","pivot","leftIdx","rightIdx","generateAnimations","sortType","swapped","dupArray","length","generateBubbleSortAnimations","min","generateSelectionSortAnimations","generateInsertionSortAnimations","currVal","currIdx","parIdx","leftChildIdx","rightChildIdx","leftChildVal","rightChildVal","idxToSwap","generateHeapSortAnimations","generateMergeSortAnimations","generateQuickSortAnimations","SortTypeSelect","onSelectSortType","value","onChange","e","target","size","fontSize","borderRadius","SortDescription","title","description","code","timeComplexity","spaceComplexity","badges","map","badge","variant","colorScheme","direction","my","spacing","display","whiteSpace","w","mx","textAlign","sortInfo","bubble","selection","insertion","heap","quick","SortInfoModal","isOpen","onClose","getSortInfo","top","maxWidth","onClick","Nav","onArraySizeSliderChange","onAnimationSpeedSliderChange","arraySize","animationSpeed","useDisclosure","onOpen","alignItems","h","base","md","lg","justifyContent","max","step","defaultValue","focusThumbOnChange","boxSize","color","as","IoCellular","IoSpeedometer","icon","border","mr","Visualizer","arrayBars","colorMode","borderBottom","borderColor","pb","bar","bg","key","Controller","stepForwardAnimation","playAnimations","pauseAnimations","stepBackwardAnimation","goToEnd","goToStart","currentAnimation","isPlaying","toggleColorMode","generateArrayBars","playPauseButton","align","justify","isDisabled","App","useState","setArrayBars","setIsPlaying","setArraySize","setSortType","setAnimationSpeed","useRef","useColorMode","current","useCallback","barObj","useEffect","animationTimer","setTimeout","clearTimeout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c8eed63.chunk.js","sourcesContent":["const swap = (arr, idx1, idx2) => {\n  [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\n};\n\nconst generateBubbleSortAnimations = (array) => {\n  const animations = [];\n  const dupArray = [...array];\n\n  let swapped;\n  for (let i = dupArray.length; i > 0; i--) {\n    swapped = false;\n    for (let j = 0; j < i - 1; j++) {\n      // animations.push({type: \"color\", indeces: [j, j + 1]})\n      if (dupArray[j].barHeight > dupArray[j + 1].barHeight) {\n        animations.push({ type: \"swap\", indeces: [j, j + 1] });\n        swap(dupArray, j, j + 1);\n        swapped = true;\n      }\n    }\n    if (swapped === false) break;\n  }\n\n  return animations;\n};\n\nconst generateSelectionSortAnimations = (array) => {\n  const animations = [];\n  const dupArray = [...array];\n\n  for (let i = 0; i < dupArray.length; i++) {\n    let min = i;\n    for (let j = i; j < dupArray.length; j++) {\n      if (dupArray[j].barHeight < dupArray[min].barHeight) {\n        min = j;\n      }\n    }\n    animations.push({ type: \"swap\", indeces: [i, min] });\n    swap(dupArray, i, min);\n  }\n\n  return animations;\n};\n\nconst generateInsertionSortAnimations = (array) => {\n  const animations = [];\n  const dupArray = [...array];\n\n  for (let i = 1; i < dupArray.length; i++) {\n    let j = i;\n    while (j > 0 && dupArray[j].barHeight < dupArray[j - 1].barHeight) {\n      animations.push({ type: \"swap\", indeces: [j, j - 1] });\n      swap(dupArray, j, j - 1);\n      j -= 1;\n    }\n  }\n\n  return animations;\n};\n\nconst generateHeapSortAnimations = (array) => {\n  const animations = [];\n  const dupArray = [...array];\n\n  for (let i = 1; i < dupArray.length; i++) {\n    const currVal = dupArray[i].barHeight;\n    let currIdx = i;\n\n    while (currIdx > 0) {\n      const parIdx = Math.floor((currIdx - 1) / 2);\n      if (currVal <= dupArray[parIdx].barHeight) break;\n      animations.push({ type: \"swap\", indeces: [currIdx, parIdx] });\n      swap(dupArray, currIdx, parIdx);\n      currIdx = parIdx;\n    }\n  }\n\n  for (let end = dupArray.length - 1; end > 0; end--) {\n    animations.push({ type: \"swap\", indeces: [0, end] });\n    swap(dupArray, 0, end);\n    let currIdx = 0;\n    const currVal = dupArray[0].barHeight;\n\n    while (true) {\n      let leftChildIdx = 2 * currIdx + 1;\n      let rightChildIdx = 2 * currIdx + 2;\n      let leftChildVal, rightChildVal;\n      let idxToSwap = null;\n\n      if (leftChildIdx < end) {\n        leftChildVal = dupArray[leftChildIdx].barHeight;\n        if (leftChildVal > currVal) {\n          idxToSwap = leftChildIdx;\n        }\n      }\n\n      if (rightChildIdx < end) {\n        rightChildVal = dupArray[rightChildIdx].barHeight;\n        if (\n          (rightChildVal > currVal && idxToSwap === null) ||\n          (rightChildVal > leftChildVal && idxToSwap !== null)\n        ) {\n          idxToSwap = rightChildIdx;\n        }\n      }\n\n      if (idxToSwap === null) break;\n\n      animations.push({ type: \"swap\", indeces: [currIdx, idxToSwap] });\n      swap(dupArray, currIdx, idxToSwap);\n      currIdx = idxToSwap;\n    }\n  }\n\n  return animations;\n};\n\nconst generateMergeSortAnimations = (array) => {\n  const animations = [];\n  const dupArray = [...array];\n  if (dupArray.length <= 1) return dupArray;\n  const auxiliary = [...array];\n  mergeSortHelper(dupArray, 0, array.length - 1, auxiliary, animations);\n  return animations;\n};\n\nconst mergeSortHelper = (array, start, end, auxiliary, animations) => {\n  if (start === end) return;\n  const mid = Math.floor((start + end) / 2);\n  mergeSortHelper(auxiliary, start, mid, array, animations);\n  mergeSortHelper(auxiliary, mid + 1, end, array, animations);\n  merge(array, start, mid, end, auxiliary, animations);\n};\n\nconst merge = (array, start, mid, end, auxiliary, animations) => {\n  let k = start;\n  let i = start;\n  let j = mid + 1;\n  while (i <= mid && j <= end) {\n    if (auxiliary[i].barHeight <= auxiliary[j].barHeight) array[k++] = auxiliary[j++];\n    else array[k++] = auxiliary[j++];\n  }\n  while (i <= mid) array[k++] = auxiliary[i++];\n  while (j <= end) array[k++] = auxiliary[j++];\n};\n\nconst generateQuickSortAnimations = (array) => {\n  const animations = [];\n  const dupArray = [...array];\n  quickSortHelper(dupArray, 0, dupArray.length - 1, animations);\n  return animations;\n};\n\nconst quickSortHelper = (array, start, end, animations) => {\n  if (start >= end) return;\n  const randIdx = Math.floor(Math.random() * (end - start) + start);\n  if (start !== randIdx)\n    animations.push({ type: \"swap\", indeces: [start, randIdx] });\n  swap(array, start, randIdx);\n  const pivot = array[start].barHeight;\n  let leftIdx = start;\n  let rightIdx = start + 1;\n  while (rightIdx <= end) {\n    if (array[rightIdx].barHeight < pivot) {\n      leftIdx++;\n      if (rightIdx !== leftIdx)\n        animations.push({ type: \"swap\", indeces: [rightIdx, leftIdx] });\n      swap(array, rightIdx, leftIdx);\n    }\n    rightIdx++;\n  }\n  if (start !== leftIdx)\n    animations.push({ type: \"swap\", indeces: [start, leftIdx] });\n  swap(array, start, leftIdx);\n  quickSortHelper(array, start, leftIdx - 1, animations);\n  quickSortHelper(array, leftIdx + 1, rightIdx - 1, animations);\n};\n\nexport const generateAnimations = (array, sortType) => {\n  switch (sortType) {\n    case \"bubble\":\n      return generateBubbleSortAnimations(array);\n    case \"selection\":\n      return generateSelectionSortAnimations(array);\n    case \"insertion\":\n      return generateInsertionSortAnimations(array);\n    case \"heap\":\n      return generateHeapSortAnimations(array);\n    case \"merge\":\n      return generateMergeSortAnimations(array);\n    case \"quick\":\n      return generateQuickSortAnimations(array);\n    default:\n      return;\n  }\n};\n","import { Select } from \"@chakra-ui/react\";\r\n\r\nconst SortTypeSelect = ({ sortType, onSelectSortType }) => {\r\n  return (\r\n    <Select\r\n      value={sortType}\r\n      onChange={(e) => onSelectSortType(e.target.value)}\r\n      size=\"sm\"\r\n      fontSize=\"16px\"\r\n      borderRadius=\"5px\"\r\n    >\r\n      <option value=\"bubble\">Bubble</option>\r\n      <option value=\"selection\">Selection</option>\r\n      <option value=\"insertion\">Insertion</option>\r\n      <option value=\"heap\">Heap</option>\r\n      <option value=\"merge\">Merge</option>\r\n      <option value=\"quick\">Quick</option>\r\n    </Select>\r\n  );\r\n};\r\n\r\nexport default SortTypeSelect;\r\n","import {\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Code,\r\n  Badge,\r\n  HStack,\r\n  VStack,\r\n  Stat,\r\n  StatGroup,\r\n  StatLabel,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst SortDescription = ({\r\n  title,\r\n  description,\r\n  code,\r\n  timeComplexity,\r\n  spaceComplexity,\r\n  badges,\r\n}) => {\r\n  return (\r\n    <>\r\n      <ModalHeader>{title}</ModalHeader>\r\n      <ModalCloseButton />\r\n      <ModalBody>\r\n        <HStack>\r\n          {badges.map((badge) => (\r\n            <Badge\r\n              variant=\"solid\"\r\n              colorScheme={badge === \"slow\" ? \"red\" : \"green\"}\r\n            >\r\n              {badge}\r\n            </Badge>\r\n          ))}\r\n        </HStack>\r\n        <Stack direction={[\"column\", \"column\", \"row\"]} my=\"10px\" spacing=\"20px\">\r\n          <VStack>{description}</VStack>\r\n          <VStack>\r\n            <Code display=\"block\" whiteSpace=\"pre\">\r\n              {code}\r\n            </Code>\r\n            <StatGroup w=\"100%\" mx=\"auto\" textAlign=\"center\">\r\n              <Stat>\r\n                <StatLabel>Time Complexity</StatLabel>\r\n                {timeComplexity}\r\n              </Stat>\r\n              <Stat>\r\n                <StatLabel>Space Complexity</StatLabel>\r\n                {spaceComplexity}\r\n              </Stat>\r\n            </StatGroup>\r\n          </VStack>\r\n        </Stack>\r\n      </ModalBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SortDescription;\r\n","import { Text, StatHelpText, StatNumber } from \"@chakra-ui/react\";\r\n\r\nconst sortInfo = {\r\n  bubble: {\r\n    title: \"Bubble Sort\",\r\n    description: (\r\n      <>\r\n        <Text>\r\n          Working from the front of the array, the array elements are compared\r\n          against their neighbor. In that comparison, if the larger array\r\n          element is in the smaller index, the two array elements are swapped.\r\n          This means that after each linear scan of the array, the largest\r\n          remaining element will be in its final sorted position.\r\n        </Text>\r\n        <Text>\r\n          Since a linear scan is done for approximately each element of the\r\n          array, the algorithmic time complexity is quadratic, making Bubble\r\n          Sort one of the worst performing of the comparison sorts. It has few\r\n          use cases outside of teaching sorting and algorithmic complexity.\r\n        </Text>\r\n      </>\r\n    ),\r\n    code: `do\r\n  swapped = false\r\n  for i = 1 to indexOfLastUnsortedElement-1\r\n    if leftElement > rightElement\r\n      swap(leftElement, rightElement)\r\n      swapped = true\r\nwhile swapped`,\r\n    timeComplexity: (\r\n      <>\r\n        <StatNumber>\r\n          O(n<sup>2</sup>)\r\n        </StatNumber>\r\n        <StatHelpText>worst case</StatHelpText>\r\n      </>\r\n    ),\r\n    spaceComplexity: <StatNumber>O(1)</StatNumber>,\r\n    badges: [\"stable\", \"in-place\", \"slow\"],\r\n  },\r\n  selection: {\r\n    title: \"Selection Sort\",\r\n    description: (\r\n      <>\r\n        <Text>\r\n          Starting at index 0, selection sort will perform a linear scan of the\r\n          entire array and find the smallest element amoung all elements. Then\r\n          it will swap that element with the element at index 0. At that point\r\n          we know that the element at index 0 is in its final sorted position.\r\n          The algorithm will continue making such scans at each index until all\r\n          values are in their sorted position.\r\n        </Text>\r\n        <Text>\r\n          Similar to Bubble Sort, a linear scan is done for approximately each\r\n          element of the array so the algorithmic complexity is quadratic.\r\n          Selection Sort is among the worst performing of the comparison sorts.\r\n          It has few use cases outside of teaching sorting and algorithmic\r\n          complexity.\r\n        </Text>\r\n      </>\r\n    ),\r\n    code: `repeat (numOfElements - 1) times\r\n  set first unsorted element as min    \r\n  for each of the unsorted elements\r\n    if element < currentMinimum\r\n      set element as new minimum\r\n  swap min with first unsorted position`,\r\n    timeComplexity: (\r\n      <>\r\n        <StatNumber>\r\n          O(n<sup>2</sup>)\r\n        </StatNumber>\r\n        <StatHelpText>best/worst case</StatHelpText>\r\n      </>\r\n    ),\r\n    spaceComplexity: <StatNumber>O(1)</StatNumber>,\r\n    badges: [\"in-place\", \"slow\"],\r\n  },\r\n  insertion: {\r\n    title: \"Insertion Sort\",\r\n    description: (\r\n      <>\r\n        <Text>\r\n          In insertion sort, we imagine that the front of the array is sorted.\r\n          Starting from index 1 of the array, we make consectutive swaps with\r\n          the back end of the sorted portion of the array until the element is\r\n          in its relative position to the other sorted elements. This pattern\r\n          continues until all elements have been sorted into their correct\r\n          relative position and there are no more elements to consider.\r\n        </Text>\r\n        <Text>\r\n          Like Bubble Sort and Selection Sort, Insertion Sort has a quadratic\r\n          worst case time complexity. However, if the array is nearly sorted the\r\n          algorithmic time complexity trends toward linear time. This makes\r\n          Insertion Sort a potential candidate for sorting if the array is\r\n          nearly sorted. A variation of Insertion Sort and Merge Sort, known as\r\n          Tim Sort, is used in many languages (most notably Python) as their\r\n          primary sort.\r\n        </Text>\r\n      </>\r\n    ),\r\n    code: `mark first element as sorted\r\nfor each unsorted element X\r\n  'extract' the element X\r\n  for j = lastSortedIndex down to 0\r\n    if current element j > X\r\n      move sorted element to the right by 1\r\n    break loop and insert X here`,\r\n    timeComplexity: (\r\n      <>\r\n        <StatNumber>\r\n          O(n<sup>2</sup>)\r\n        </StatNumber>\r\n        <StatHelpText>worst case</StatHelpText>\r\n      </>\r\n    ),\r\n    spaceComplexity: <StatNumber>O(1)</StatNumber>,\r\n    badges: [\"stable\", \"in-place\", \"slow\"],\r\n  },\r\n\r\n  heap: {\r\n    title: \"Heap Sort\",\r\n    description: (\r\n      <>\r\n        <Text>\r\n          Heap Sort uses a heap data structure to continously find the maximum\r\n          value and move it to the back of the array. A heap can be built in\r\n          place in an array. After building the heap, the maximum value is\r\n          removed and swapped to the back element of the array. Then the heap\r\n          structure is reevaluated and the process continues until each next\r\n          maximum element is moved to its position in the back of the array.\r\n        </Text>\r\n        <Text>\r\n          Building a heap from an array will take O(n) time, and each swap will\r\n          take O(log(n)) for n values. Therefor, time complexity for Heap Sort\r\n          will be O(n + n*log(n)) which simplifies to O(n*log(n)). Although heap\r\n          sort is a fast sorting algorithm, it generally performs worse in\r\n          practice than its other log-linear time complexity sorts, such as\r\n          Quick Sort and Merge Sort. The underlying heap data structure,\r\n          however, is widely used for maintaining priority queues or finding the\r\n          smallest/largest element of a collection.\r\n        </Text>\r\n      </>\r\n    ),\r\n    code: `# construct max heap\r\nfor element of array\r\n  while elementIndex > 0\r\n    if parent > element\r\n        swap(element, parent)\r\n        elementIndex = parentIndex\r\n\r\n# sort by sequentially placing max elements\r\nrepeat (numOfElements - 1) times\r\n  swap(maxElement, lastUnsortedElement)\r\n  heapifyDown(0, lastUnsortedElementIndex)`,\r\n    timeComplexity: (\r\n      <>\r\n        <StatNumber>O(n*log(n))</StatNumber>\r\n        <StatHelpText>best/worst case</StatHelpText>\r\n      </>\r\n    ),\r\n    spaceComplexity: <StatNumber>O(1)</StatNumber>,\r\n    badges: [\"in-place\", \"fast\"],\r\n  },\r\n  merge: {\r\n    title: \"Merge Sort\",\r\n    description: (\r\n      <>\r\n        <Text>\r\n          Merge Sort is one of the more difficult sorts to visualize.\r\n          Essentially what is happening is the array is getting split into\r\n          consecutively smaller arrays, until each subarray is the length of 0\r\n          or 1. Each of the smaller arrays is then consectively merged with\r\n          another array, maintaining the sorted order. Merge Sort utilizes\r\n          recursion to both split and then later merge the subarrays.\r\n        </Text>\r\n        <Text>\r\n          The best, worst, and average case time complexity of Merge Sort is\r\n          O(n*log(n)), making it consistently one of the fastest comparison\r\n          sorts. Since Merge Sort is also stable, it is sometimes preferred over\r\n          Quick Sort if the array contains sorted objects rather than just\r\n          integers (when stability matters). However, Merge Sort has a linear\r\n          space complexity due to the auxiliary arrays being created on each\r\n          merge, so if memory is going to be an issue than other sorts may serve\r\n          better.\r\n        </Text>\r\n      </>\r\n    ),\r\n    code: `split elements into partitions of size 1\r\nrecursively merge adjacent partitions\r\n  for i = leftPartIdx to rightPartIdx\r\n    if leftPartHeadValue <= rightPartHeadValue\r\n      copy leftPartHeadValue      \r\n    else: copy rightPartHeadValue      \r\ncopy elements back to original array`,\r\n    timeComplexity: (\r\n      <>\r\n        <StatNumber>O(n*log(n))</StatNumber>\r\n        <StatHelpText>best/worst case</StatHelpText>\r\n      </>\r\n    ),\r\n    spaceComplexity: <StatNumber>O(n)</StatNumber>,\r\n    badges: [\"stable\", \"fast\"],\r\n  },\r\n  quick: {\r\n    title: \"Quick Sort\",\r\n    description: (\r\n      <>\r\n        <Text>\r\n          Quick Sort, like Merge Sort utilizes recursion to partition an array\r\n          into smaller portions. On each recursive call, a pivot is selected and\r\n          then each other element is moved to the left or right of the pivot\r\n          depending on its relative size. After each recursive call, the pivot\r\n          that was selected will be in its final position within the array.\r\n        </Text>\r\n        <Text>\r\n          Quick Sort can make a series of long range swaps, making it unstable.\r\n          However, it generally out performs all other sorting algorithms. Quick\r\n          Sort has a quadratic worst case time complexity. However, the average\r\n          case time complexity of O(n*log(n)) is generally used because the\r\n          worst case time complexity is nearly impossible to get on large input\r\n          sizes.\r\n        </Text>\r\n      </>\r\n    ),\r\n    code: `for each (unsorted) partition\r\n  set first element as pivot\r\n  storeIndex = pivotIndex + 1\r\n  for i = pivotIndex + 1 to rightmostIndex\r\n    if element[i] < element[pivot]\r\n      swap(i, storeIndex); storeIndex++\r\n  swap(pivot, storeIndex - 1)`,\r\n    timeComplexity: (\r\n      <>\r\n        <StatNumber>O(n*log(n))</StatNumber>\r\n        <StatHelpText>average case</StatHelpText>\r\n      </>\r\n    ),\r\n    spaceComplexity: <StatNumber>O(log(n))</StatNumber>,\r\n    badges: [\"in-place\", \"fast\"],\r\n  },\r\n};\r\n\r\nexport const getSortInfo = (sortType) => {\r\n  return sortInfo[sortType];\r\n};\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalFooter,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport SortDescription from \"./SortDescription\";\r\nimport { getSortInfo } from \"../utils/getSortInfo\";\r\n\r\nconst SortInfoModal = ({ isOpen, onClose, sortType }) => {\r\n  const { title, description, code, timeComplexity, spaceComplexity, badges } =\r\n    getSortInfo(sortType);\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      size={[\"full\", \"md\"]}\r\n      top={[\"0\", \"3.75rem\"]}\r\n    >\r\n      <ModalOverlay />\r\n      <ModalContent\r\n        my={[\"0\", \"10vh\"]}\r\n        w={[\"100%\", \"90%\", \"90%\", \"80%\", \"60%\"]}\r\n        maxWidth=\"1000px\"\r\n      >\r\n        <SortDescription\r\n          title={title}\r\n          description={description}\r\n          code={code}\r\n          timeComplexity={timeComplexity}\r\n          spaceComplexity={spaceComplexity}\r\n          badges={badges}\r\n        />\r\n        <ModalFooter>\r\n          <Button onClick={onClose}>Close</Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SortInfoModal;\r\n","import { IoSpeedometer, IoCellular, IoInformation } from \"react-icons/io5\";\nimport {\n  Flex,\n  Box,\n  IconButton,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  HStack,\n  useDisclosure,\n} from \"@chakra-ui/react\";\n\nimport SortTypeSelect from \"./SortTypeSelect\";\nimport SortInfoModal from \"./SortInfoModal\";\n\nconst Nav = ({\n  onArraySizeSliderChange,\n  onAnimationSpeedSliderChange,\n  arraySize,\n  animationSpeed,\n  sortType,\n  onSelectSortType,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      h=\"10vh\"\n      w={{ base: \"95vw\", md: \"95vw\", lg: \"80vw\" }}\n      mx=\"auto\"\n      justifyContent={[\"space-between\", \"space-around\"]}\n    >\n      <Slider\n        aria-label=\"array size slider\"\n        min={10}\n        max={60}\n        step={1}\n        defaultValue={arraySize}\n        focusThumbOnChange={false}\n        onChange={(value) => onArraySizeSliderChange(value)}\n        colorScheme=\"teal\"\n        w=\"25vw\"\n      >\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb boxSize={[6, 8, 10]}>\n          <Box\n            color={\"tomato\"}\n            as={IoCellular}\n            fontSize={{ base: \"16px\", md: \"24px\", lg: \"28px\" }}\n          />\n        </SliderThumb>\n      </Slider>\n      <Slider\n        aria-label=\"visualization speed slider\"\n        min={0}\n        max={198}\n        step={2}\n        defaultValue={200 - animationSpeed}\n        focusThumbOnChange={false}\n        onChange={(value) => onAnimationSpeedSliderChange(value)}\n        colorScheme=\"teal\"\n        w=\"25vw\"\n      >\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb boxSize={[6, 8, 10]}>\n          <Box\n            color={\"tomato\"}\n            as={IoSpeedometer}\n            fontSize={{ base: \"18px\", md: \"28px\", lg: \"30px\" }}\n          />\n        </SliderThumb>\n      </Slider>\n\n      <HStack>\n        <IconButton\n          icon={<IoInformation />}\n          size=\"2xs\"\n          borderRadius=\"50%\"\n          border=\"transparent\"\n          colorScheme=\"teal\"\n          fontSize=\"20px\"\n          mr={[\"1px\", \"2px\", \"5px\", \"5px\"]}\n          onClick={onOpen}\n        />\n        <SortInfoModal onClose={onClose} isOpen={isOpen} sortType={sortType} />\n        <Box w={[\"25vw\", \"25vw\", \"16vw\", \"10vw\"]} maxWidth=\"200px\">\n          <SortTypeSelect\n            sortType={sortType}\n            onSelectSortType={onSelectSortType}\n          />\n        </Box>\n      </HStack>\n    </Flex>\n  );\n};\n\nexport default Nav;\n","import { Flex, Box } from \"@chakra-ui/react\";\n\nconst Visualizer = ({ arrayBars, arraySize, colorMode }) => {\n  return (\n    <Flex\n      h=\"80vh\"\n      w={{ base: \"95vw\", md: \"95vw\", lg: \"80vw\" }}\n      justifyContent=\"space-between\"\n      mx=\"auto\"\n      alignItems=\"flex-end\"\n      borderBottom={`5px solid`}\n      borderColor={colorMode === \"light\" ? \"teal.500\" : \"teal.200\"}\n      pb=\"1.5vh\"\n    >\n      {arrayBars.map((bar) => (\n        <Box\n          bg={colorMode === \"light\" ? `${bar.color}.500` : `${bar.color}.200`}\n          h={`${bar.barHeight}%`}\n          w={`${80 / arraySize}%`}\n          key={bar.key}\n        />\n      ))}\n    </Flex>\n  );\n};\n\nexport default Visualizer;\n","import { Flex, IconButton, HStack } from \"@chakra-ui/react\";\nimport { IoMdRefresh } from \"react-icons/io\";\nimport {\n  IoPlaySkipBack,\n  IoChevronBack,\n  IoPlay,\n  IoPause,\n  IoChevronForward,\n  IoPlaySkipForward,\n  IoSunny,\n  IoMoon,\n} from \"react-icons/io5\";\n\nconst Controller = ({\n  stepForwardAnimation,\n  playAnimations,\n  pauseAnimations,\n  stepBackwardAnimation,\n  goToEnd,\n  goToStart,\n  currentAnimation,\n  animations,\n  isPlaying,\n  toggleColorMode,\n  colorMode,\n  generateArrayBars,\n}) => {\n  const playPauseButton = isPlaying ? (\n    <IconButton\n      onClick={pauseAnimations}\n      icon={<IoPause />}\n      colorScheme=\"teal\"\n    />\n  ) : (\n    <IconButton onClick={playAnimations} icon={<IoPlay />} colorScheme=\"teal\" />\n  );\n\n  return (\n    <Flex\n      h=\"10vh\"\n      w={{ base: \"95vw\", md: \"95vw\", lg: \"80vw\" }}\n      align=\"center\"\n      mx=\"auto\"\n      justify=\"space-between\"\n    >\n      <IconButton\n        onClick={generateArrayBars}\n        icon={<IoMdRefresh />}\n        colorScheme=\"teal\"\n        fontSize=\"24px\"\n        isDisabled={isPlaying}\n      ></IconButton>\n\n      <HStack spacing={{ base: \"8px\", md: \"20px\", lg: \"40px\" }}>\n        <IconButton\n          onClick={goToStart}\n          icon={<IoPlaySkipBack />}\n          colorScheme=\"teal\"\n        />\n        <IconButton\n          onClick={stepBackwardAnimation}\n          icon={<IoChevronBack />}\n          colorScheme=\"teal\"\n          isDisabled={isPlaying || currentAnimation === 0}\n        />\n        {playPauseButton}\n        <IconButton\n          onClick={stepForwardAnimation}\n          icon={<IoChevronForward />}\n          colorScheme=\"teal\"\n          isDisabled={isPlaying || currentAnimation >= animations.length}\n        />\n        <IconButton\n          onClick={goToEnd}\n          icon={<IoPlaySkipForward />}\n          colorScheme=\"teal\"\n        />\n      </HStack>\n\n      <IconButton\n        onClick={toggleColorMode}\n        icon={colorMode === \"light\" ? <IoMoon /> : <IoSunny />}\n        colorScheme=\"teal\"\n        fontSize=\"24px\"\n      ></IconButton>\n    </Flex>\n  );\n};\n\nexport default Controller;\n","import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { generateAnimations } from \"./utils/animationsGenerators\";\nimport { useColorMode } from \"@chakra-ui/react\";\n\nimport Nav from \"./components/Nav\";\nimport Visualizer from \"./components/Visualizer\";\nimport Controller from \"./components/Controller\";\n\nfunction App() {\n  const [arrayBars, setArrayBars] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [arraySize, setArraySize] = useState(30);\n  const [sortType, setSortType] = useState(\"bubble\");\n  const [animationSpeed, setAnimationSpeed] = useState(50);\n  const animations = useRef([]);\n  const currentAnimation = useRef(0);\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  const generateArrayBars = () => {\n    const array = [];\n    for (let i = 0; i < arraySize; i++) {\n      array.push({\n        barHeight: Math.floor(Math.random() * 96) + 5,\n        color: \"teal\",\n        key: i,\n      });\n    }\n\n    setArrayBars(array);\n    setIsPlaying(false);\n    animations.current = generateAnimations(array, sortType);\n    currentAnimation.current = 0;\n  };\n\n  const stepForwardAnimation = useCallback(() => {\n    if (currentAnimation.current >= animations.current.length) {\n      setIsPlaying(false);\n      return;\n    }\n    let array = [...arrayBars];\n    const [idx1, idx2] = animations.current[currentAnimation.current].indeces;\n    switch (animations.current[currentAnimation.current].type) {\n      case \"swap\":\n        [array[idx1], array[idx2]] = [array[idx2], array[idx1]];\n        break;\n      case \"color\":\n        array = array.map((barObj, i) => {\n          if (i === idx1 || i === idx2) {\n            const coloredBar = { ...barObj, color: \"black\" };\n            return coloredBar;\n          }\n          return { ...barObj, color: \"teal\" };\n        });\n        break;\n      default:\n        break;\n    }\n\n    currentAnimation.current++;\n    setArrayBars(array);\n  }, [arrayBars]);\n\n  const stepBackwardAnimation = () => {\n    if (currentAnimation.current <= 0) return;\n    currentAnimation.current--;\n\n    if (animations.current[currentAnimation.current].type === \"swap\") {\n      const [idx1, idx2] = animations.current[currentAnimation.current].indeces;\n      const array = [...arrayBars];\n      [array[idx1], array[idx2]] = [array[idx2], array[idx1]];\n      setArrayBars(array);\n    }\n  };\n\n  const goToStart = () => {\n    const array = [...arrayBars];\n    for (let i = currentAnimation.current - 1; i >= 0; i--) {\n      const [idx1, idx2] = animations.current[i].indeces;\n      [array[idx1], array[idx2]] = [array[idx2], array[idx1]];\n    }\n    currentAnimation.current = 0;\n    setArrayBars(array);\n    setIsPlaying(false);\n  };\n\n  const goToEnd = () => {\n    const array = [...arrayBars];\n    for (let i = currentAnimation.current; i < animations.current.length; i++) {\n      const [idx1, idx2] = animations.current[i].indeces;\n      [array[idx1], array[idx2]] = [array[idx2], array[idx1]];\n    }\n    currentAnimation.current = animations.current.length;\n    setArrayBars(array);\n  };\n\n  const onArraySizeSliderChange = (value) => {\n    setArraySize(value);\n  };\n\n  const onAnimationSpeedSliderChange = (value) => {\n    setAnimationSpeed(200 - value);\n  };\n\n  const onSelectSortType = (value) => {\n    setSortType(value);\n  };\n\n  const playAnimations = () => {\n    setIsPlaying(true);\n  };\n\n  const pauseAnimations = () => {\n    setIsPlaying(false);\n  };\n\n  useEffect(() => {\n    generateArrayBars();\n  }, []);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const animationTimer = setTimeout(stepForwardAnimation, animationSpeed);\n\n      return () => clearTimeout(animationTimer);\n    }\n  }, [isPlaying, arrayBars, stepForwardAnimation]);\n\n  useEffect(() => {\n    generateArrayBars();\n  }, [arraySize, sortType]);\n\n  return (\n    <>\n      <Nav\n        onArraySizeSliderChange={onArraySizeSliderChange}\n        onAnimationSpeedSliderChange={onAnimationSpeedSliderChange}\n        arraySize={arraySize}\n        animationSpeed={animationSpeed}\n        sortType={sortType}\n        onSelectSortType={onSelectSortType}\n      />\n      <Visualizer\n        arrayBars={arrayBars}\n        arraySize={arraySize}\n        colorMode={colorMode}\n      />\n      <Controller\n        stepForwardAnimation={stepForwardAnimation}\n        playAnimations={playAnimations}\n        pauseAnimations={pauseAnimations}\n        stepBackwardAnimation={stepBackwardAnimation}\n        goToEnd={goToEnd}\n        goToStart={goToStart}\n        isPlaying={isPlaying}\n        currentAnimation={currentAnimation.current}\n        animations={animations.current}\n        generateArrayBars={generateArrayBars}\n        toggleColorMode={toggleColorMode}\n        colorMode={colorMode}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}