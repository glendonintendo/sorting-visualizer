(this["webpackJsonpsorting-visualizer"]=this["webpackJsonpsorting-visualizer"]||[]).push([[0],{116:function(e,t,r){"use strict";r.r(t);var o=r(43),n=r.n(o),s=r(138),i=r(4),a=r(1),l=r(95),c=r(22),d=r(85),h=r(132),u=r(133),p=r(137),b=r(134),g=r(139),m=r(135),j=r(140),x=r(3),f=function(e){var t=e.sortType,r=e.onSelectSortType;return Object(x.jsxs)(j.a,{value:t,onChange:function(e){return r(e.target.value)},size:"sm",fontSize:"16px",borderRadius:"5px",children:[Object(x.jsx)("option",{value:"bubble",children:"Bubble"}),Object(x.jsx)("option",{value:"selection",children:"Selection"}),Object(x.jsx)("option",{value:"insertion",children:"Insertion"}),Object(x.jsx)("option",{value:"heap",children:"Heap"}),Object(x.jsx)("option",{value:"merge",children:"Merge"}),Object(x.jsx)("option",{value:"quick",children:"Quick"})]})},y=r(136),w=r(92),O=r(128),C=r(129),v=r(130),S=function(e){var t=e.title,r=e.description,o=e.code,n=e.timeComplexity,s=e.spaceComplexity,i=e.badges;return Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(y.f,{children:t}),Object(x.jsx)(y.c,{}),Object(x.jsxs)(y.b,{children:[Object(x.jsx)(g.a,{children:i.map((function(e){return Object(x.jsx)(O.a,{variant:"solid",colorScheme:"slow"===e?"red":"green",children:e})}))}),Object(x.jsxs)(g.b,{direction:["column","column","row"],my:"10px",spacing:"20px",children:[Object(x.jsx)(g.c,{children:r}),Object(x.jsxs)(g.c,{children:[Object(x.jsx)(C.a,{display:"block",whiteSpace:"pre",children:o}),Object(x.jsxs)(v.b,{w:"100%",mx:"auto",textAlign:"center",children:[Object(x.jsxs)(v.a,{children:[Object(x.jsx)(v.d,{children:"Time Complexity"}),n]}),Object(x.jsxs)(v.a,{children:[Object(x.jsx)(v.d,{children:"Space Complexity"}),s]})]})]})]})]})]})},H=r(131),k={bubble:{title:"Bubble Sort",description:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(H.a,{children:"Working from the front of the array, the array elements are compared against their neighbor. In that comparison, if the larger array element is in the smaller index, the two array elements are swapped. This means that after each linear scan of the array, the largest remaining element will be in its final sorted position."}),Object(x.jsx)(H.a,{children:"Since a linear scan is done for approximately each element of the array, the algorithmic time complexity is quadratic, making Bubble Sort one of the worst performing of the comparison sorts. It has few use cases outside of teaching sorting and algorithmic complexity."})]}),code:"do\n  swapped = false\n  for i = 1 to indexOfLastUnsortedElement-1\n    if leftElement > rightElement\n      swap(leftElement, rightElement)\n      swapped = true\nwhile swapped",timeComplexity:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsxs)(v.e,{children:["O(n",Object(x.jsx)("sup",{children:"2"}),")"]}),Object(x.jsx)(v.c,{children:"worst case"})]}),spaceComplexity:Object(x.jsx)(v.e,{children:"O(1)"}),badges:["stable","in-place","slow"]},selection:{title:"Selection Sort",description:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(H.a,{children:"Starting at index 0, selection sort will perform a linear scan of the entire array and find the smallest element amoung all elements. Then it will swap that element with the element at index 0. At that point we know that the element at index 0 is in its final sorted position. The algorithm will continue making such scans at each index until all values are in their sorted position."}),Object(x.jsx)(H.a,{children:"Similar to Bubble Sort, a linear scan is done for approximately each element of the array so the algorithmic complexity is quadratic. Selection Sort is among the worst performing of the comparison sorts. It has few use cases outside of teaching sorting and algorithmic complexity."})]}),code:"repeat (numOfElements - 1) times\n  set first unsorted element as min    \n  for each of the unsorted elements\n    if element < currentMinimum\n      set element as new minimum\n  swap min with first unsorted position",timeComplexity:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsxs)(v.e,{children:["O(n",Object(x.jsx)("sup",{children:"2"}),")"]}),Object(x.jsx)(v.c,{children:"best/worst case"})]}),spaceComplexity:Object(x.jsx)(v.e,{children:"O(1)"}),badges:["in-place","slow"]},insertion:{title:"Insertion Sort",description:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(H.a,{children:"In insertion sort, we imagine that the front of the array is sorted. Starting from index 1 of the array, we make consectutive swaps with the back end of the sorted portion of the array until the element is in its relative position to the other sorted elements. This pattern continues until all elements have been sorted into their correct relative position and there are no more elements to consider."}),Object(x.jsx)(H.a,{children:"Like Bubble Sort and Selection Sort, Insertion Sort has a quadratic worst case time complexity. However, if the array is nearly sorted the algorithmic time complexity trends toward linear time. This makes Insertion Sort a potential candidate for sorting if the array is nearly sorted. A variation of Insertion Sort and Merge Sort, known as Tim Sort, is used in many languages (most notably Python) as their primary sort."})]}),code:"mark first element as sorted\nfor each unsorted element X\n  'extract' the element X\n  for j = lastSortedIndex down to 0\n    if current element j > X\n      move sorted element to the right by 1\n    break loop and insert X here",timeComplexity:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsxs)(v.e,{children:["O(n",Object(x.jsx)("sup",{children:"2"}),")"]}),Object(x.jsx)(v.c,{children:"worst case"})]}),spaceComplexity:Object(x.jsx)(v.e,{children:"O(1)"}),badges:["stable","in-place","slow"]},heap:{title:"Heap Sort",description:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(H.a,{children:"Heap Sort uses a heap data structure to continously find the maximum value and move it to the back of the array. A heap can be built in place in an array. After building the heap, the maximum value is removed and swapped to the back element of the array. Then the heap structure is reevaluated and the process continues until each next maximum element is moved to its position in the back of the array."}),Object(x.jsx)(H.a,{children:"Building a heap from an array will take O(n) time, and each swap will take O(log(n)) for n values. Therefor, time complexity for Heap Sort will be O(n + n*log(n)) which simplifies to O(n*log(n)). Although heap sort is a fast sorting algorithm, it generally performs worse in practice than its other log-linear time complexity sorts, such as Quick Sort and Merge Sort. The underlying heap data structure, however, is widely used for maintaining priority queues or finding the smallest/largest element of a collection."})]}),code:"# construct max heap\nfor element of array\n  while elementIndex > 0\n    if parent > element\n        swap(element, parent)\n        elementIndex = parentIndex\n\n# sort by sequentially placing max elements\nrepeat (numOfElements - 1) times\n  swap(maxElement, lastUnsortedElement)\n  heapifyDown(0, lastUnsortedElementIndex)",timeComplexity:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(v.e,{children:"O(n*log(n))"}),Object(x.jsx)(v.c,{children:"best/worst case"})]}),spaceComplexity:Object(x.jsx)(v.e,{children:"O(1)"}),badges:["in-place","fast"]},merge:{title:"Merge Sort",description:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(H.a,{children:"Merge Sort is one of the more difficult sorts to visualize. Essentially what is happening is the array is getting split into consecutively smaller arrays, until each subarray is the length of 0 or 1. Each of the smaller arrays is then consectively merged with another array, maintaining the sorted order. Merge Sort utilizes recursion to both split and then later merge the subarrays."}),Object(x.jsx)(H.a,{children:"The best, worst, and average case time complexity of Merge Sort is O(n*log(n)), making it consistently one of the fastest comparison sorts. Since Merge Sort is also stable, it is sometimes preferred over Quick Sort if the array contains sorted objects rather than just integers (when stability matters). However, Merge Sort has a linear space complexity due to the auxiliary arrays being created on each merge, so if memory is going to be an issue than other sorts may serve better."})]}),code:"split elements into partitions of size 1\nrecursively merge adjacent partitions\n  for i = leftPartIdx to rightPartIdx\n    if leftPartHeadValue <= rightPartHeadValue\n      copy leftPartHeadValue      \n    else: copy rightPartHeadValue      \ncopy elements back to original array",timeComplexity:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(v.e,{children:"O(n*log(n))"}),Object(x.jsx)(v.c,{children:"best/worst case"})]}),spaceComplexity:Object(x.jsx)(v.e,{children:"O(n)"}),badges:["stable","fast"]},quick:{title:"Quick Sort",description:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(H.a,{children:"Quick Sort, like Merge Sort utilizes recursion to partition an array into smaller portions. On each recursive call, a pivot is selected and then each other element is moved to the left or right of the pivot depending on its relative size. After each recursive call, the pivot that was selected will be in its final position within the array."}),Object(x.jsx)(H.a,{children:"Quick Sort can make a series of long range swaps, making it unstable. However, it generally out performs all other sorting algorithms. Quick Sort has a quadratic worst case time complexity. However, the average case time complexity of O(n*log(n)) is generally used because the worst case time complexity is nearly impossible to get on large input sizes."})]}),code:"for each (unsorted) partition\n  set first element as pivot\n  storeIndex = pivotIndex + 1\n  for i = pivotIndex + 1 to rightmostIndex\n    if element[i] < element[pivot]\n      swap(i, storeIndex); storeIndex++\n  swap(pivot, storeIndex - 1)",timeComplexity:Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(v.e,{children:"O(n*log(n))"}),Object(x.jsx)(v.c,{children:"average case"})]}),spaceComplexity:Object(x.jsx)(v.e,{children:"O(log(n))"}),badges:["in-place","fast"]}},I=function(e){var t=e.isOpen,r=e.onClose,o=function(e){return k[e]}(e.sortType),n=o.title,s=o.description,i=o.code,a=o.timeComplexity,l=o.spaceComplexity,c=o.badges;return Object(x.jsxs)(y.a,{isOpen:t,onClose:r,size:["full","md"],top:["0","3.75rem"],children:[Object(x.jsx)(y.g,{}),Object(x.jsxs)(y.d,{my:["0","10vh"],w:["100%","90%","90%","80%","60%"],maxWidth:"1000px",children:[Object(x.jsx)(S,{title:n,description:s,code:i,timeComplexity:a,spaceComplexity:l,badges:c}),Object(x.jsx)(y.e,{children:Object(x.jsx)(w.a,{onClick:r,children:"Close"})})]})]})},T=function(e){var t=e.onArraySizeSliderChange,r=e.onAnimationSpeedSliderChange,o=e.arraySize,n=e.animationSpeed,s=e.sortType,i=e.onSelectSortType,a=e.colorMode,l=Object(h.a)(),j=l.isOpen,y=l.onOpen,w=l.onClose;return Object(x.jsxs)(u.a,{alignItems:"center",h:"10vh",w:{base:"95vw",md:"95vw",lg:"80vw"},mx:"auto",justifyContent:["space-between","space-around"],children:[Object(x.jsxs)(p.a,{"aria-label":"array size slider",min:10,max:60,step:1,defaultValue:o,focusThumbOnChange:!1,onChange:function(e){return t(e)},colorScheme:"green",w:"25vw",children:[Object(x.jsx)(p.d,{children:Object(x.jsx)(p.b,{})}),Object(x.jsx)(p.c,{boxSize:[6,8,8],bg:"light"===a?"green.500":"green.200",children:Object(x.jsx)(b.a,{as:c.a,color:"light"===a?"gray.200":"gray.500",fontSize:{base:"16px",md:"24px",lg:"24px"}})})]}),Object(x.jsxs)(p.a,{"aria-label":"visualization speed slider",min:0,max:198,step:2,defaultValue:200-n,focusThumbOnChange:!1,onChange:function(e){return r(e)},colorScheme:"green",w:"25vw",children:[Object(x.jsx)(p.d,{children:Object(x.jsx)(p.b,{})}),Object(x.jsx)(p.c,{boxSize:[6,8,8],bg:"light"===a?"green.500":"green.200",children:Object(x.jsx)(b.a,{as:d.a,color:"light"===a?"gray.200":"gray.500",fontSize:{base:"18px",md:"28px",lg:"28px"}})})]}),Object(x.jsxs)(g.a,{children:[Object(x.jsx)(m.a,{icon:Object(x.jsx)(c.d,{}),size:"2xs",borderRadius:"50%",border:"transparent",colorScheme:"blue",fontSize:"20px",mr:["1px","2px","5px","5px"],onClick:y}),Object(x.jsx)(I,{onClose:w,isOpen:j,sortType:s}),Object(x.jsx)(b.a,{w:["25vw","25vw","16vw","10vw"],maxWidth:"200px",children:Object(x.jsx)(f,{sortType:s,onSelectSortType:i})})]})]})},A=function(e){var t=e.arrayBars,r=e.arraySize,o=e.colorMode;return Object(x.jsx)(u.a,{h:"80vh",w:{base:"95vw",md:"95vw",lg:"80vw"},justifyContent:"space-between",mx:"auto",alignItems:"flex-end",borderBottom:"5px solid",borderColor:"light"===o?"blue.500":"blue.200",pb:"1.5vh",children:t.map((function(e){return Object(x.jsx)(b.a,{bg:"".concat(e.color,"light"===o?".500":".200"),h:"".concat(e.barHeight,"%"),w:"".concat(80/r,"%")},e.key)}))})},z=r(86),M=function(e){var t=e.stepForwardAnimation,r=e.playAnimations,o=e.pauseAnimations,n=e.stepBackwardAnimation,s=e.goToEnd,i=e.goToStart,a=e.currentAnimation,l=e.animations,d=e.isPlaying,h=e.toggleColorMode,p=e.colorMode,b=e.generateArrayBars,j=d?Object(x.jsx)(m.a,{onClick:o,icon:Object(x.jsx)(c.f,{}),colorScheme:"blue"}):Object(x.jsx)(m.a,{onClick:r,icon:Object(x.jsx)(c.g,{}),colorScheme:"blue"});return Object(x.jsxs)(u.a,{h:"10vh",w:{base:"95vw",md:"95vw",lg:"80vw"},align:"center",mx:"auto",justify:"space-between",children:[Object(x.jsx)(m.a,{onClick:b,icon:Object(x.jsx)(z.a,{}),colorScheme:"blue",fontSize:"24px",isDisabled:d}),Object(x.jsxs)(g.a,{spacing:{base:"8px",md:"20px",lg:"40px"},children:[Object(x.jsx)(m.a,{onClick:i,icon:Object(x.jsx)(c.h,{}),colorScheme:"blue"}),Object(x.jsx)(m.a,{onClick:n,icon:Object(x.jsx)(c.b,{}),colorScheme:"blue",isDisabled:d||0===a}),j,Object(x.jsx)(m.a,{onClick:t,icon:Object(x.jsx)(c.c,{}),colorScheme:"blue",isDisabled:d||a>=l.length}),Object(x.jsx)(m.a,{onClick:s,icon:Object(x.jsx)(c.i,{}),colorScheme:"blue"})]}),Object(x.jsx)(m.a,{onClick:h,icon:"light"===p?Object(x.jsx)(c.e,{}):Object(x.jsx)(c.j,{}),colorScheme:"blue",fontSize:"24px"})]})},E=function(e){for(var t=[],r=0;r<e;r++)t.push({barHeight:Math.floor(96*Math.random())+5,color:"blue",key:r});return t},F=function(e,t,r){var o=[e[r],e[t]];e[t]=o[0],e[r]=o[1]},B=r(87),q=r(38),P=function(e){var t,r=[],o=Object(q.a)(e);try{for(o.s();!(t=o.n()).done;){var n=t.value;r.push(Object(B.a)({},n))}}catch(s){o.e(s)}finally{o.f()}return r},Q=function(e){for(var t=[],r=P(e),o=r.length-1;o>=0;o--){for(var n=0;n<o;n++)t.push({type:"color",indeces:[n,n+1],oldColors:["blue","blue"],newColors:["green","green"]}),r[n].barHeight>r[n+1].barHeight&&(t.push({type:"swap",idx1:n,idx2:n+1}),F(r,n,n+1)),t.push({type:"color",indeces:[n,n+1],oldColors:["green","green"],newColors:["blue","blue"]});t.push({type:"color",indeces:[o],oldColors:["blue"],newColors:["orange"]})}return t},R=function(e){for(var t=[],r=P(e),o=0;o<r.length;o++){for(var n=void 0,s=o;s<r.length;s++)t.push({type:"color",indeces:[s],oldColors:["blue"],newColors:["green"]}),void 0===n||r[s].barHeight<r[n].barHeight?(void 0===n?t.push({type:"color",indeces:[s],oldColors:["green"],newColors:["red"]}):t.push({type:"color",indeces:[n,s],oldColors:["red","green"],newColors:["blue","red"]}),n=s):t.push({type:"color",indeces:[s],oldColors:["green"],newColors:["blue"]});t.push({type:"swap",idx1:o,idx2:n}),t.push({type:"color",indeces:[o],oldColors:["red"],newColors:["orange"]}),F(r,o,n)}return t},V=function(e){var t=[],r=P(e);t.push({type:"color",indeces:[0],oldColors:["blue"],newColors:["orange"]});for(var o=1;o<r.length;o++){for(var n=o;n>0;){if(t.push({type:"color",indeces:[n],oldColors:["blue"],newColors:["red"]}),t.push({type:"color",indeces:[n-1],oldColors:["orange"],newColors:["green"]}),r[n].barHeight>r[n-1].barHeight){t.push({type:"color",indeces:[n,n-1],oldColors:["red","green"],newColors:["orange","orange"]});break}t.push({type:"swap",idx1:n,idx2:n-1}),F(r,n,n-1),t.push({type:"color",indeces:[n],oldColors:["green"],newColors:["orange"]}),n-=1}t.push({type:"color",indeces:[0],oldColors:["red"],newColors:["orange"]})}return t},D=function(e){var t=[],r=P(e);t.push({type:"color",indeces:[0],oldColors:["blue"],newColors:["orange"]});for(var o=1;o<r.length;o++){var n=r[o].barHeight,s=o;for(t.push({type:"color",indeces:[o],oldColors:["blue"],newColors:["red"]});s>0;){var i=Math.floor((s-1)/2);if(t.push({type:"color",indeces:[i],oldColors:["blue"],newColors:["green"]}),n<=r[i].barHeight){t.push({type:"color",indeces:[i,s],oldColors:["green","red"],newColors:["orange","orange"]});break}t.push({type:"swap",idx1:s,idx2:i}),F(r,s,i),t.push({type:"color",indeces:[s],oldColors:["green"],newColors:["orange"]}),s=i}t.push({type:"color",indeces:[s],oldColors:["red"],newColors:["orange"]})}t.push({type:"massColor",startIdx:0,endIdx:r.length-1,oldColor:"orange",newColor:"blue"});for(var a=r.length-1;a>0;a--){t.push({type:"color",indeces:[0,a],oldColors:["blue","blue"],newColors:["green","green"]}),t.push({type:"swap",idx1:0,idx2:a}),F(r,0,a),t.push({type:"color",indeces:[0,a],oldColors:["green","green"],newColors:["red","orange"]});for(var l=0,c=r[0].barHeight;;){var d=2*l+1,h=2*l+2,u=void 0,p=void 0,b=null,g={type:"color",indeces:[],oldColors:[],newColors:[],message:"compare animation"};if(d<a&&(g.indeces.push(d),g.oldColors.push("blue"),g.newColors.push("green"),(u=r[d].barHeight)>c&&(b=d)),h<a&&(g.indeces.push(h),g.oldColors.push("blue"),g.newColors.push("green"),((p=r[h].barHeight)>c&&null===b||p>u&&null!==b)&&(b=h)),g.indeces.length>0&&t.push(g),null===b){var m={type:"color",indeces:[l],oldColors:["red"],newColors:["blue"],message:"idxToSwap is null compareEndAnimation"};d<a&&(m.indeces.push(d),m.oldColors.push("green"),m.newColors.push("blue")),h<a&&(m.indeces.push(h),m.oldColors.push("green"),m.newColors.push("blue")),t.push(m);break}b===d&&h<a?t.push({type:"color",indeces:[h],oldColors:["green"],newColors:["blue"],message:"idxToSwap equal leftChildIdx"}):b===h&&t.push({type:"color",indeces:[d],oldColors:["green"],newColors:["blue"],message:"idxToSwap equal leftChildIdx"}),t.push({type:"swap",idx1:l,idx2:b}),F(r,l,b),t.push({type:"color",indeces:[l],oldColors:["green"],newColors:["blue"],message:"set currIdx to blue"}),l=b}}return t.push({type:"color",indeces:[0],oldColors:["blue"],newColors:["orange"],message:"set final unsorted to orange"}),t},X=function e(t,r,o,n,s){if(r!==o){var i=Math.floor((r+o)/2);e(n,r,i,t,s),e(n,i+1,o,t,s),U(t,r,i,o,n,s),o-r!==t.length-1&&s.push({type:"massColor",startIdx:r,endIdx:o,oldColor:"orange",newColor:"blue"})}},U=function(e,t,r,o,n,s){s.push({type:"massColor",startIdx:t,endIdx:o,oldColor:"blue",newColor:"red"});for(var i=t,a=t,l=r+1;a<=r&&l<=o;)n[a].barHeight<=n[l].barHeight?(s.push({type:"assignHeightAndColor",index:i,newHeight:n[a].barHeight,oldHeight:n[i].barHeight,oldColor:"red",newColor:"orange"}),e[i]=n[a],i++,a++):(s.push({type:"assignHeightAndColor",index:i,newHeight:n[l].barHeight,oldHeight:n[i].barHeight,oldColor:"red",newColor:"orange"}),e[i]=n[l],i++,l++);for(;a<=r;)s.push({type:"assignHeightAndColor",index:i,newHeight:n[a].barHeight,oldHeight:n[i].barHeight,oldColor:"red",newColor:"orange"}),e[i]=n[a],i++,a++;for(;l<=o;)s.push({type:"assignHeightAndColor",index:i,newHeight:n[l].barHeight,oldHeight:n[i].barHeight,oldColor:"red",newColor:"orange"}),e[i]=n[l],i++,l++},W=function(e){var t=[],r=P(e),o=P(e);return X(r,0,e.length-1,o,t),t},J=function e(t,r,o,n){var s=L(t,r,o,n);s-1>=r&&e(t,r,s-1,n),s+1<=o&&e(t,s+1,o,n)},L=function(e,t,r,o){if(t===r)return o.push({type:"color",indeces:[t],oldColors:["blue"],newColors:["red"]}),void o.push({type:"color",indeces:[t],oldColors:["red"],newColors:["orange"]});var n=Math.floor(Math.random()*(r-t)+t);o.push({type:"color",indeces:[n],oldColors:["blue"],newColors:["red"]}),o.push({type:"color",indeces:[t],oldColors:["blue"],newColors:["green"]}),o.push({type:"swap",idx1:t,idx2:n}),F(e,t,n),o.push({type:"color",indeces:[n],oldColors:["green"],newColors:["blue"]});var s=e[t].barHeight,i=t+1,a=r;for(o.push({type:"color",indeces:[i,a],oldColors:["blue","blue"],newColors:["green","green"]});i<=a;)if(e[i].barHeight>s&&e[a].barHeight<s&&(o.push({type:"swap",idx1:a,idx2:i}),F(e,a,i)),e[i].barHeight<=s&&(i!==a&&o.push({type:"color",indeces:[i,i+1],oldColors:["green","blue"],newColors:["blue","green"]}),i++),e[a].barHeight>=s){if(a-1===t)return o.push({type:"color",indeces:[t,a],oldColors:["red","green"],newColors:["orange","blue"]}),t;o.push({type:"color",indeces:[a,a-1],oldColors:["green","blue"],newColors:["blue","green"]}),a--}return o.push({type:"swap",idx1:t,idx2:a}),F(e,t,a),o.push({type:"color",indeces:[t,a],oldColors:["green","red"],newColors:["blue","orange"]}),a},G=function(e){var t=[],r=P(e);return J(r,0,r.length-1,t),t},K=function(e,t){switch(t){case"bubble":return Q(e);case"selection":return R(e);case"insertion":return V(e);case"heap":return D(e);case"merge":return W(e);case"quick":return G(e);default:return}},N=function(e){var t,r=P(e),o=Object(q.a)(r);try{for(o.s();!(t=o.n()).done;){t.value.color="orange"}}catch(n){o.e(n)}finally{o.f()}return r.sort((function(e,t){return e.barHeight-t.barHeight})),r},Y=function(e,t){switch(t.type){case"swap":var r=t.idx1,o=t.idx2,n=[e[o],e[r]];e[r]=n[0],e[o]=n[1];break;case"color":for(var s=0;s<t.indeces.length;s++)e[t.indeces[s]].color=t.newColors[s];break;case"massColor":for(var i=t.startIdx,a=t.endIdx,l=t.newColor,c=i;c<=a;c++)e[c].color=l;break;case"assignHeightAndColor":e[t.index].barHeight=t.newHeight,e[t.index].color=t.newColor}return e},Z=function(e,t){switch(t.type){case"swap":var r=t.idx1,o=t.idx2,n=[e[o],e[r]];e[r]=n[0],e[o]=n[1];break;case"color":for(var s=0;s<t.indeces.length;s++)e[t.indeces[s]].color=t.oldColors[s];break;case"massColor":for(var i=t.startIdx,a=t.endIdx,l=t.oldColor,c=i;c<=a;c++)e[c].color=l;break;case"assignHeightAndColor":e[t.index].barHeight=t.oldHeight,e[t.index].color=t.oldColor}return e};var $=function(){var e=Object(a.useState)(!1),t=Object(i.a)(e,2),r=t[0],o=t[1],n=Object(a.useState)(30),s=Object(i.a)(n,2),c=s[0],d=s[1],h=Object(a.useState)(E(c)),u=Object(i.a)(h,2),p=u[0],b=u[1],g=Object(a.useState)("bubble"),m=Object(i.a)(g,2),j=m[0],f=m[1],y=Object(a.useState)(50),w=Object(i.a)(y,2),O=w[0],C=w[1],v=Object(a.useRef)(K(p,j)),S=Object(a.useRef)(0),H=Object(a.useRef)(P(p)),k=Object(a.useRef)(N(p)),I=Object(l.b)(),z=I.colorMode,F=I.toggleColorMode,B=function(){var e=E(c);b(e),H.current=P(e),k.current=N(e),o(!1),v.current=K(e,j),S.current=0},q=function(){if(S.current>=v.current.length)o(!1);else{var e=Y(P(p),v.current[S.current]);S.current++,b(e)}};return Object(a.useEffect)((function(){if(r){var e=setTimeout(q,O);return function(){return clearTimeout(e)}}}),[r,p,q]),Object(a.useEffect)((function(){B()}),[c]),Object(a.useEffect)((function(){b(P(H.current)),o(!1),v.current=K(H.current,j),S.current=0}),[j]),Object(x.jsxs)(x.Fragment,{children:[Object(x.jsx)(T,{onArraySizeSliderChange:function(e){d(e)},onAnimationSpeedSliderChange:function(e){C(200-e)},arraySize:c,animationSpeed:O,sortType:j,onSelectSortType:function(e){f(e)},colorMode:z}),Object(x.jsx)(A,{arrayBars:p,arraySize:c,colorMode:z}),Object(x.jsx)(M,{stepForwardAnimation:q,playAnimations:function(){o(!0)},pauseAnimations:function(){o(!1)},stepBackwardAnimation:function(){if(!(S.current<=0)){S.current--;var e=Z(P(p),v.current[S.current]);b(e)}},goToEnd:function(){b(P(k.current)),o(!1),S.current=v.current.length},goToStart:function(){b(P(H.current)),o(!1),S.current=0},isPlaying:r,currentAnimation:S.current,animations:v.current,generateArrayBars:B,toggleColorMode:F,colorMode:z})]})};n.a.render(Object(x.jsx)(s.a,{children:Object(x.jsx)($,{})}),document.getElementById("root"))}},[[116,1,2]]]);
//# sourceMappingURL=main.deb77543.chunk.js.map